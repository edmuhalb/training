const CycleService = require('../../src/services/cycleService');

describe('CycleService', () => {
    let cycleService;

    beforeEach(() => {
        cycleService = new CycleService();
    });

    describe('getAvailableCycles', () => {
        test('should return array of cycles', async() => {
            const cycles = await cycleService.getAvailableCycles();

            expect(Array.isArray(cycles)).toBe(true);
            expect(cycles.length).toBeGreaterThan(0);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–∏–∫–ª–∞
            const [cycle] = cycles;
            expect(cycle).toHaveProperty('id');
            expect(cycle).toHaveProperty('name');
            expect(cycle).toHaveProperty('direction');
            expect(cycle).toHaveProperty('level');
            expect(cycle).toHaveProperty('period');
        });

        test('should return cycles with correct structure', async() => {
            const cycles = await cycleService.getAvailableCycles();

            cycles.forEach(cycle => {
                expect(typeof cycle.id).toBe('number');
                expect(typeof cycle.name).toBe('string');
                expect(typeof cycle.direction).toBe('string');
                expect(typeof cycle.level).toBe('string');
                expect(typeof cycle.period).toBe('string');
            });
        });
    });

    describe('getCycleById', () => {
        test('should return cycle by valid id', async() => {
            const cycle = await cycleService.getCycleById(1);

            expect(cycle).toBeDefined();
            expect(cycle.id).toBe(1);
            expect(cycle.name).toBe('–°–†–¶1');
            expect(cycle.direction).toBe('–¢—Ä–æ–µ–±–æ—Ä—å–µ');
        });

        test('should return undefined for invalid id', async() => {
            const cycle = await cycleService.getCycleById(999);
            expect(cycle).toBeUndefined();
        });
    });

    describe('getCyclesByCriteria', () => {
        test('should filter cycles by gender', async() => {
            const criteria = { gender: 'male' };
            const cycles = await cycleService.getCyclesByCriteria(criteria);

            expect(cycles.length).toBeGreaterThan(0);
            cycles.forEach(cycle => {
                expect(cycle.gender).toBe('male');
            });
        });

        test('should filter cycles by level', async() => {
            const criteria = { level: '–ö–ú–°' };
            const cycles = await cycleService.getCyclesByCriteria(criteria);

            expect(cycles.length).toBeGreaterThan(0);
            cycles.forEach(cycle => {
                expect(cycle.level).toContain('–ö–ú–°');
            });
        });

        test('should filter cycles by direction', async() => {
            const criteria = { direction: '–ñ–∏–º –ª–µ–∂–∞' };
            const cycles = await cycleService.getCyclesByCriteria(criteria);

            expect(cycles.length).toBeGreaterThan(0);
            cycles.forEach(cycle => {
                expect(cycle.direction).toBe('–ñ–∏–º –ª–µ–∂–∞');
            });
        });

        test('should filter cycles by weight', async() => {
            const criteria = { weight: 85 };
            const cycles = await cycleService.getCyclesByCriteria(criteria);

            expect(cycles.length).toBeGreaterThan(0);
            cycles.forEach(cycle => {
                if (cycle.weightMin) {
                    expect(criteria.weight).toBeGreaterThanOrEqual(cycle.weightMin);
                }
            });
        });

        test('should return empty array for no matches', async() => {
            const criteria = { gender: 'female' };
            const cycles = await cycleService.getCyclesByCriteria(criteria);

            expect(cycles.length).toBe(0);
        });
    });

    describe('getCycleDescription', () => {
        test('should return formatted description', () => {
            const cycle = {
                name: '–°–†–¶1',
                direction: '–¢—Ä–æ–µ–±–æ—Ä—å–µ',
                level: 'II —Ä–∞–∑—Ä—è–¥ ‚Äì –ö–ú–°',
                period: '–°–∏–ª–æ–≤–æ–π',
                weightMin: 80,
                additionalInfo: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            };

            const description = cycleService.getCycleDescription(cycle);

            expect(description).toContain('–°–†–¶1');
            expect(description).toContain('–¢—Ä–æ–µ–±–æ—Ä—å–µ');
            expect(description).toContain('II —Ä–∞–∑—Ä—è–¥ ‚Äì –ö–ú–°');
            expect(description).toContain('–°–∏–ª–æ–≤–æ–π');
            expect(description).toContain('80+ –∫–≥');
            expect(description).toContain('–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        });
    });

    describe('getWorkoutPlan', () => {
        test('should generate workout plan for cycle and user', () => {
            const cycle = {
                id: 1,
                name: '–°–†–¶1',
                direction: '–¢—Ä–æ–µ–±–æ—Ä—å–µ',
                level: 'II —Ä–∞–∑—Ä—è–¥ ‚Äì –ö–ú–°',
                period: '–°–∏–ª–æ–≤–æ–π',
                exercises: [
                    { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', sets: 4, reps: '5-8', intensity: '80-90%' }
                ]
            };

            const userProfile = {
                id: 12345,
                weight: 75,
                height: 180,
                level: '–ö–ú–°',
                gender: 'male'
            };

            const plan = cycleService.getWorkoutPlan(cycle, userProfile);

            expect(plan).toHaveProperty('name', '–°–†–¶1');
            expect(plan).toHaveProperty('direction', '–¢—Ä–æ–µ–±–æ—Ä—å–µ');
            expect(plan).toHaveProperty('level', 'II —Ä–∞–∑—Ä—è–¥ ‚Äì –ö–ú–°');
            expect(plan).toHaveProperty('period', '–°–∏–ª–æ–≤–æ–π');
            expect(plan).toHaveProperty('duration');
            expect(plan).toHaveProperty('frequency');
            expect(plan).toHaveProperty('exercises');
            expect(plan).toHaveProperty('notes');
            expect(Array.isArray(plan.exercises)).toBe(true);
            expect(Array.isArray(plan.notes)).toBe(true);
        });
    });

    describe('getCycleDuration', () => {
        test('should return correct duration for different periods', () => {
            const cycle1 = { period: '–°–∏–ª–æ–≤–æ–π' };
            const cycle2 = { period: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å' };
            const cycle3 = { period: '–í—ã—Ö–æ–¥ –Ω–∞ –ø–∏–∫' };
            const cycle4 = { period: '–ú–∞—Å—Å–æ–Ω–∞–±–æ—Ä' };

            expect(cycleService.getCycleDuration(cycle1)).toBe('8-12 –Ω–µ–¥–µ–ª—å');
            expect(cycleService.getCycleDuration(cycle2)).toBe('6-10 –Ω–µ–¥–µ–ª—å');
            expect(cycleService.getCycleDuration(cycle3)).toBe('4-6 –Ω–µ–¥–µ–ª—å');
            expect(cycleService.getCycleDuration(cycle4)).toBe('12-16 –Ω–µ–¥–µ–ª—å');
        });
    });

    describe('getTrainingFrequency', () => {
        test('should return correct frequency for different directions', () => {
            const cycle1 = { direction: '–¢—Ä–æ–µ–±–æ—Ä—å–µ' };
            const cycle2 = { direction: '–ñ–∏–º –ª–µ–∂–∞' };
            const cycle3 = { direction: '–ê—Ä–º—Ä–µ—Å—Ç–ª–∏–Ω–≥' };
            const cycle4 = { direction: '–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥' };

            expect(cycleService.getTrainingFrequency(cycle1)).toBe('3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
            expect(cycleService.getTrainingFrequency(cycle2)).toBe('2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
            expect(cycleService.getTrainingFrequency(cycle3)).toBe('3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
            expect(cycleService.getTrainingFrequency(cycle4)).toBe('4-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é');
        });
    });

    describe('getCycleNotes', () => {
        test('should generate notes based on cycle and user profile', () => {
            const cycle = {
                additionalInfo: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                period: '–ú–∞—Å—Å–æ–Ω–∞–±–æ—Ä'
            };

            const userProfile = {
                weight: 65,
                height: 180,
                level: '–ù–∞—á–∞–ª—å–Ω—ã–π'
            };

            const notes = cycleService.getCycleNotes(cycle, userProfile);

            expect(Array.isArray(notes)).toBe(true);
            expect(notes.length).toBeGreaterThan(0);
            expect(notes).toContain('–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
            expect(notes).toContain('üçΩÔ∏è –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É —Å–Ω–∞');
        });

        test('should generate weight recommendation for light users', () => {
            const cycle = { weightMin: 80 };
            const userProfile = { weight: 65, height: 180 };

            const notes = cycleService.getCycleNotes(cycle, userProfile);

            expect(notes).toContain('‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å –¥–æ 80 –∫–≥ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        });

        test('should generate peak preparation notes', () => {
            const cycle = { period: '–í—ã—Ö–æ–¥ –Ω–∞ –ø–∏–∫' };
            const userProfile = { level: '–ú–°' };

            const notes = cycleService.getCycleNotes(cycle, userProfile);

            expect(notes).toContain('üèÜ –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å');
        });
    });
});
