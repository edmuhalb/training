// Optional dependency - install with: npm install node-telegram-bot-api
let TelegramBot;
try {
    TelegramBot = require('node-telegram-bot-api');
} catch (error) {
    console.log('node-telegram-bot-api not installed. Bot functionality disabled.');
    TelegramBot = null;
}
const express = require('express');
const dotenv = require('dotenv');
const Database = require('./database');
const CycleService = require('./services/cycleService');
const UserService = require('./services/userService');
const WorkoutService = require('./services/workoutService');
const DialogService = require('./services/dialogService');
const UserCommands = require('./commands/userCommands');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class TrainingBot {
    constructor() {
        if (!TelegramBot) {
            throw new Error('node-telegram-bot-api is required for bot functionality. Install with: npm install node-telegram-bot-api');
        }

        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
        this.app = express();
        this.database = new Database();
        this.cycleService = new CycleService();
        this.userService = new UserService(this.database);
        this.workoutService = new WorkoutService(this.database);
        this.dialogService = new DialogService(this.userService);

        this.setupMiddleware();
        this.setupHandlers();
        this.setupWebhook();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userCommands = new UserCommands(this.bot, this.userService);
    }

    setupMiddleware() {
        this.app.use(express.json());
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, async(msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                await this.userService.createOrUpdateUser({
                    id: userId,
                    username: msg.from.username,
                    firstName: msg.from.first_name,
                    lastName: msg.from.last_name
                });

                const welcomeMessage = `
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–∏–∫–ª (–°–†–¶)
‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:
/setup_profile - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

üìã –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/cycles - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏–∫–ª—ã
/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å
                `;

                await this.bot.sendMessage(chatId, welcomeMessage);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
                await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /cycles - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏–∫–ª—ã
        this.bot.onText(/\/cycles/, async(msg) => {
            const chatId = msg.chat.id;

            try {
                const cycles = await this.cycleService.getAvailableCycles();
                const keyboard = this.createCyclesKeyboard(cycles);

                await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–∏–∫–ª:', {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏–∫–ª–æ–≤:', error);
                await this.bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏–∫–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /profile - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        this.bot.onText(/\/profile/, async(msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                const user = await this.userService.getUser(userId);
                const profileMessage = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
‚Ä¢ –ü–æ–ª: ${user.gender || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–µ—Å: ${user.weight || '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
‚Ä¢ –†–æ—Å—Ç: ${user.height || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${user.level || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/setup_profile - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
/set_gender - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª
/set_weight - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å
/set_height - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç
/set_level - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                `;

                await this.bot.sendMessage(chatId, profileMessage);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /setup_profile - –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.bot.onText(/\/setup_profile/, async(msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                await this.dialogService.startProfileDialog(this.bot, chatId, userId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
        this.bot.onText(/\/cancel/, async(msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                if (this.dialogService.isUserInDialog(userId)) {
                    this.dialogService.cancelDialog(userId);
                    await this.bot.sendMessage(chatId, '‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_profile –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
                } else {
                    await this.bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–∏–∞–ª–æ–≥–∞:', error);
                await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–∏–∞–ª–æ–≥–∞.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('callback_query', async(callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const { data } = callbackQuery;
            const userId = callbackQuery.from.id;

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
                if (this.dialogService.isUserInDialog(userId) && data.startsWith('dialog_')) {
                    const handled = await this.dialogService.handleDialogResponse(this.bot, callbackQuery.message, data);
                    if (handled) {
                        await this.bot.answerCallbackQuery(callbackQuery.id);
                        return;
                    }
                }

                if (data.startsWith('cycle_')) {
                    const cycleId = data.replace('cycle_', '');
                    await this.handleCycleSelection(chatId, cycleId);
                } else if (data.startsWith('gender_')) {
                    const gender = data.replace('gender_', '');
                    await this.handleGenderSelection(chatId, userId, gender);
                }

                await this.bot.answerCallbackQuery(callbackQuery.id);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
                await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async(msg) => {
            if (msg.text && !msg.text.startsWith('/')) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
                if (this.dialogService.isUserInDialog(msg.from.id)) {
                    const handled = await this.dialogService.handleDialogResponse(this.bot, msg);
                    if (handled) return;
                }

                await this.handleTextMessage(msg);
            }
        });
    }

    createCyclesKeyboard(cycles) {
        const keyboard = [];

        cycles.forEach(cycle => {
            keyboard.push([{
                text: `${cycle.name} (${cycle.direction})`,
                callback_data: `cycle_${cycle.id}`
            }]);
        });

        return keyboard;
    }

    async handleCycleSelection(chatId, cycleId) {
        try {
            const cycle = await this.cycleService.getCycleById(cycleId);
            const user = await this.userService.getUser(chatId);

            if (!user.weight || !user.height || !user.gender) {
                await this.bot.sendMessage(chatId,
                    '–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile');
                return;
            }

            const workoutPlan = await this.workoutService.generateWorkoutPlan(cycle, user);

            const planMessage = `
üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:

${cycle.name}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${cycle.direction}
–£—Ä–æ–≤–µ–Ω—å: ${cycle.level}
–ü–µ—Ä–∏–æ–¥: ${cycle.period}

${workoutPlan.description}

${workoutPlan.exercises.map((exercise, index) =>
        `${index + 1}. ${exercise.name} - ${exercise.sets} –ø–æ–¥—Ö–æ–¥–æ–≤ x ${exercise.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π`
    ).join('\n')}
            `;

            await this.bot.sendMessage(chatId, planMessage);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–∏–∫–ª–∞:', error);
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        }
    }

    async handleGenderSelection(chatId, userId, gender) {
        try {
            await this.userService.updateUser(userId, { gender });
            await this.bot.sendMessage(chatId, `–ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª–∞:', error);
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
        }
    }

    async handleTextMessage(msg) {
        const chatId = msg.chat.id;
        const { text } = msg;

        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        if (text.includes('–≤–µ—Å') || text.includes('weight')) {
            await this.bot.sendMessage(chatId, '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_weight');
        } else if (text.includes('—Ä–æ—Å—Ç') || text.includes('height')) {
            await this.bot.sendMessage(chatId, '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_height');
        }
    }

    setupWebhook() {
        this.app.post('/webhook', (req, res) => {
            this.bot.processUpdate(req.body);
            res.sendStatus(200);
        });
    }

    async start() {
        try {
            await this.database.init();
            console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

            const port = process.env.PORT || 3000;
            this.app.listen(port, () => {
                console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            });

            console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new TrainingBot();
bot.start();

module.exports = TrainingBot;
