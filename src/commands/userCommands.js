class UserCommands {
    constructor(bot, userService) {
        this.bot = bot;
        this.userService = userService;
        this.setupCommands();
    }

    setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ /set_gender
        this.bot.onText(/\/set_gender/, async(msg) => {
            const chatId = msg.chat.id;
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'gender_male' },
                            { text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'gender_female' }
                        ]
                    ]
                }
            };

            await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', keyboard);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /set_weight
        this.bot.onText(/\/set_weight/, async(msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId,
                '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_weight 75.5'
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_weight —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        this.bot.onText(/\/set_weight (.+)/, async(msg, match) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const [, weight] = match;

            try {
                await this.userService.setWeight(userId, weight);
                await this.bot.sendMessage(chatId, `–í–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${weight} –∫–≥`);
            } catch (error) {
                await this.bot.sendMessage(chatId,
                    '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /set_height
        this.bot.onText(/\/set_height/, async(msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId,
                '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180):\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_height 180'
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_height —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        this.bot.onText(/\/set_height (.+)/, async(msg, match) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const [, height] = match;

            try {
                await this.userService.setHeight(userId, height);
                await this.bot.sendMessage(chatId, `–†–æ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${height} —Å–º`);
            } catch (error) {
                await this.bot.sendMessage(chatId,
                    '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ—Å—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180)');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /set_level
        this.bot.onText(/\/set_level/, async(msg) => {
            const chatId = msg.chat.id;
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞—á–∞–ª—å–Ω—ã–π', callback_data: 'level_–ù–∞—á–∞–ª—å–Ω—ã–π' }],
                        [{ text: 'II —Ä–∞–∑—Ä—è–¥', callback_data: 'level_II —Ä–∞–∑—Ä—è–¥' }],
                        [{ text: 'I —Ä–∞–∑—Ä—è–¥', callback_data: 'level_I —Ä–∞–∑—Ä—è–¥' }],
                        [{ text: '–ö–ú–°', callback_data: 'level_–ö–ú–°' }],
                        [{ text: '–ú–°', callback_data: 'level_–ú–°' }],
                        [{ text: '–ú–°–ú–ö', callback_data: 'level_–ú–°–ú–ö' }],
                        [{ text: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å', callback_data: 'level_–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å' }]
                    ]
                }
            };

            await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:', keyboard);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /my_plans
        this.bot.onText(/\/my_plans/, async(msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                const user = await this.userService.getUser(userId);
                if (!user) {
                    await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start');
                    return;
                }

                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.bot.sendMessage(chatId,
                    '–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n' +
                    '–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cycles –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–æ–≤.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /help
        this.bot.onText(/\/help/, async(msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/cycles - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏–∫–ª—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/my_plans - –ú–æ–∏ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:
/setup_profile - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
/set_gender - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª
/set_weight - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å
/set_height - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç
/set_level - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–º:
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥

‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –°–æ–≤–µ—Ç: –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_profile
            `;

            await this.bot.sendMessage(chatId, helpMessage);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        this.bot.on('callback_query', async(callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const { data } = callbackQuery;
            const userId = callbackQuery.from.id;

            if (data.startsWith('level_')) {
                const level = data.replace('level_', '');
                try {
                    await this.userService.setLevel(userId, level);
                    await this.bot.sendMessage(chatId, `–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${level}`);
                } catch (error) {
                    await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.');
                }
            }
        });
    }
}

module.exports = UserCommands;
